spring:
  application:
    name: api-gateway # Name of the application (API Gateway)
  cloud:
    gateway:
      routes:
#        # Route configuration for the user-service
#        - id: user-service # Unique identifier for the user-service route
#          uri: lb://user-service # Load-balanced URI for the user-service
#          predicates:
#            - Path=/user/** # Matches requests with the path starting with /user/
#          filters:
#            - StripPrefix=1 # Removes the first segment of the path before forwarding to user-service
        ## This section is commented out, but it can be uncommented to enable routing to the user-service.(user service is working as client interface)

        # Route configuration for the notification-service
        - id: notification-service # Unique identifier for the notification-service route
          uri: lb://notification-service # Load-balanced URI for the notification-service
          predicates:
            - Path=/sendEmail/** # Matches requests with the path starting with /notification/
#          filters:
#            - StripPrefix=1 # Removes the first segment of the path before forwarding to notification-service

        # Route configuration for the cart-service
        - id: cart-service # Unique identifier for the cart-service route
          uri: lb://cart-service # Load-balanced URI for the cart-service
          predicates:
            - Path=/carts/** # Matches requests with the path starting with /carts/
#          filters:
#            - StripPrefix=1 # Removes the first segment of the path before forwarding to cart-service

        # Route configuration for the product-service
        - id: product-service # Unique identifier for the product-service route
          uri: lb://product-service # Load-balanced URI for the product-service
          predicates:
            - Path=/products/** # Matches requests with the path starting with /products/
#          filters:
#            - StripPrefix=1 # Removes the first segment of the path before forwarding to product-service

        # Route configuration for the inventory-service
        - id: inventory-service # Unique identifier for the inventory-service route
          uri: lb://inventory-service # Load-balanced URI for the inventory-service
          predicates:
            - Path=/inventory/** # Matches requests with the path starting with /inventory/
#          filters:
#            - StripPrefix=1 # Removes the first segment of the path before forwarding to inventory-service

        # Route configuration for the order-service
        - id: order-service # Unique identifier for the order-service route
          uri: lb://order-service # Load-balanced URI for the order-service
          predicates:
            - Path=/orders/** # Matches requests with the path starting with /orders/
#          filters:
#            - StripPrefix=1 # Removes the first segment of the path before forwarding to order-service

        # Route configuration for the load-product-service
        - id: load-product-service # Unique identifier for the load-product-service route
          uri: lb://load-product-service # Load-balanced URI for the load-product-service
          predicates:
            - Path=/productFile/** # Matches requests with the path starting with /productFile/
#          filters:
#            - StripPrefix=1 # Removes the first segment of the path before forwarding to load-product-service

server:
  port: 8084 # Port on which the API Gateway will run

eureka:
  client:
    service-url:
      defaultZone: http://discovery-server:8761/eureka/ # URL of the Eureka server for service discovery

management:
  endpoints:
    web:
      exposure:
        include: "*" # Exposes all actuator endpoints over HTTP
  health:
    readinessstate:
      enabled: true # Enables readiness health check endpoint
    livenessstate:
      enabled: true # Enables liveness health check endpoint
  endpoint:
    shutdown:
      access: unrestricted # Allows unrestricted access to the shutdown endpoint
    health:
      probes:
        enabled: true # Enables health probes for Kubernetes or cloud platforms
  info:
    env:
      enabled: true # Includes environment properties in the /info endpoint
  metrics:
    tags:
      application: ${spring.application.name} # Adds application name as a tag to all metrics



#  The class-level mapping (e.g., @RequestMapping("/sendEmail") in the NotificationController) is handled by the Spring Framework. When a request is routed to
#  the notification-service by the API Gateway, Spring automatically prefixes the class-level mapping to all method-level mappings within the controller.


#If user-service has two instances running:
#Instance 1: http://localhost:8081
#Instance 2: http://localhost:8082
#  A request to lb://user-service will be routed to one of these instances based on the load balancing strategy (e.g., round-robin).
#  This ensures high availability and efficient distribution of traffic across service instances.
